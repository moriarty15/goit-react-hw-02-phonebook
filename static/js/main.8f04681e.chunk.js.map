{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js"],"names":["ContractForm","state","name","number","handleAllInputChange","e","currentTarget","value","setState","handleS","preventDefault","handlePushContact","trim","props","onSubmit","this","className","onChange","type","pattern","title","required","Component","ContactList","f","onDeleteContacts","map","id","onClick","Filter","filter","App","contacts","formSubmitHandler","data","some","includes","alert","objd","uuidv4","deleteContact","contactId","prevState","contact","getVisibleContacts","normalizeFilter","toLowerCase","visibleContacts","ContactForm","React","reactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f04681e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './ContactList.scss';\n\nclass ContractForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  handleAllInputChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n  handleS = e => {\n    e.preventDefault();\n  };\n  // функция записи новых абонентов в телефонную книгу\n  handlePushContact = e => {\n    e.preventDefault();\n    if (this.state.name.trim() === '') return;\n\n    this.props.onSubmit(this.state);\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <div>\n        <form onSubmit={this.handlePushContact}>\n          <label className=\"label\">\n            Name\n            <input\n              className=\"input\"\n              value={name}\n              onChange={this.handleAllInputChange}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n            />\n          </label>\n          <label className=\"label\">\n            Number\n            <input\n              className=\"input\"\n              type=\"tel\"\n              value={number}\n              onChange={this.handleAllInputChange}\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n            />\n          </label>\n          <button>Add contact</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ContractForm;\n","import React from 'react';\nimport './ContactList.scss';\n\nconst ContactList = ({ f, onDeleteContacts }) => {\n  return (\n    <ul className=\"Contact__list\">\n      {f.map(({ id, name, number }) => {\n        return (\n          <li key={id} className=\"Contact__item\">\n            {name}: {number}{' '}\n            <button type=\"button\" onClick={() => onDeleteContacts(id)}>\n              delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nexport default ContactList;\n","const Filter = ({ filter, onChange }) => {\n  return (\n    <label>\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={filter} onChange={onChange} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter/Filter';\n\nclass App extends React.Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n  // функция получения значения из любого инпута\n  handleAllInputChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  // метод добавления контакта в телефонную книгу\n  formSubmitHandler = data => {\n    // условие что контакт с таким именем есть в телефонной книге\n    if (this.state.contacts.some(e => e.name.includes(data.name))) {\n      alert(`${data.name} is already in contacts`);\n      return;\n    }\n    // объект с именем и номером телефона для пуша в общий массив контактов\n    const objd = {\n      name: data.name,\n      number: data.number,\n      id: uuidv4(),\n    };\n    this.setState({ contacts: [...this.state.contacts, objd] });\n  };\n  // метод удаления контакта из телефонной книги\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  // вынес фильтр в функцию\n  getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n        <h2>Contacts</h2>\n        <Filter filter={filter} onChange={this.handleAllInputChange} />\n        <ContactList\n          f={visibleContacts}\n          onDeleteContacts={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import reactDom from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\n\nreactDom.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}