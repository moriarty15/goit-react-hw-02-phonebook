{"version":3,"sources":["App.js","index.js"],"names":["App","state","contacts","name","number","handleInputChange","e","setState","currentTarget","value","handleNumbers","handlePushContact","trim","objd","handleCreateList","map","contact","uuidv4","this","onChange","type","pattern","title","required","onClick","React","Component","reactDom","render","document","getElementById"],"mappings":"4OAGMA,E,4MACJC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,OAAQ,I,EAEVC,kBAAoB,SAAAC,GAClB,EAAKC,SAAS,CAAEJ,KAAMG,EAAEE,cAAcC,S,EAExCC,cAAgB,SAAAJ,GACd,EAAKC,SAAS,CAAEH,OAAQE,EAAEE,cAAcC,S,EAE1CE,kBAAoB,WAClB,GAA+B,KAA3B,EAAKV,MAAME,KAAKS,OAApB,CACA,IAAMC,EAAO,CACXV,KAAM,EAAKF,MAAME,KACjBC,OAAQ,EAAKH,MAAMG,QAErB,EAAKG,SAAS,CAAEL,SAAS,GAAD,mBAAM,EAAKD,MAAMC,UAAjB,CAA2BW,Q,EAErDC,iBAAmB,WACjB,OACE,6BACG,EAAKb,MAAMC,SAASa,KAAI,SAAAC,GACvB,OACE,+BACGA,EAAQb,KADX,KACmBa,EAAQZ,SADlBa,qB,4CAQnB,WACE,MAAyBC,KAAKjB,MAAtBE,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,OACE,gCACE,0CACA,kCACG,IADH,OAGE,uBACEK,MAAON,EACPgB,SAAUD,KAAKb,kBACfe,KAAK,OACLjB,KAAK,OACLkB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAGZ,uBACA,2CAEE,uBACEH,KAAK,MACLX,MAAOL,EACPe,SAAUD,KAAKR,cACfP,KAAK,SACLkB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,uBACA,wBAAQC,QAASN,KAAKP,kBAAtB,yBACA,2CAEGO,KAAKJ,6B,GApEEW,IAAMC,WA2ET1B,IC3Ef2B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.aacf8f44.chunk.js","sourcesContent":["import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass App extends React.Component {\n  state = {\n    contacts: [],\n    name: '',\n    number: '',\n  };\n  handleInputChange = e => {\n    this.setState({ name: e.currentTarget.value });\n  };\n  handleNumbers = e => {\n    this.setState({ number: e.currentTarget.value });\n  };\n  handlePushContact = () => {\n    if (this.state.name.trim() === '') return;\n    const objd = {\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.setState({ contacts: [...this.state.contacts, objd] });\n  };\n  handleCreateList = () => {\n    return (\n      <ul>\n        {this.state.contacts.map(contact => {\n          return (\n            <li key={uuidv4()}>\n              {contact.name}: {contact.number}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <div>\n        <p>Phonebook</p>\n        <label>\n          {' '}\n          Name\n          <input\n            value={name}\n            onChange={this.handleInputChange}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <br />\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            value={number}\n            onChange={this.handleNumbers}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <br />\n        <button onClick={this.handlePushContact}>Add contact</button>\n        <div>\n          Contacts\n          {this.handleCreateList()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import reactDom from 'react-dom';\r\nimport App from './App';\r\n\r\nreactDom.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}